
# decryptor.py
# This script decrypts the log file generated by the keylogger.py script.
# It requires the 'secret.key' file to decrypt the contents of 'encrypted_keylog.txt'.
# Intended for ethical and educational use only.

from cryptography.fernet import Fernet
import os
import datetime

# --- Configuration --- #
ENCRYPTED_LOG_FILE = "encrypted_keylog.txt"  # Path to the encrypted log file
KEY_FILE = "secret.key"             # Path to the encryption key file
DECRYPTED_LOG_FILE_PREFIX = "decrypted_log_" # Prefix for the decrypted log file

# --- Key Loading Function --- #
def load_key():
    """
    Loads the encryption key from the specified key file.
    Handles cases where the key file does not exist or cannot be read.
    """
    if not os.path.exists(KEY_FILE):
        print(f"[ERROR] Encryption key file not found: {KEY_FILE}")
        print("Please ensure the keylogger has run at least once to generate the key.")
        return None
    try:
        with open(KEY_FILE, "rb") as kf:
            key = kf.read()
        print(f"[INFO] Encryption key loaded from {KEY_FILE}")
        return key
    except IOError as e:
        print(f"[ERROR] Could not read encryption key from {KEY_FILE}: {e}")
        return None

# --- Decryption Function --- #
def decrypt_and_save_log_file(fernet_cipher):
    """
    Reads the encrypted log file, decrypts each line, and saves the decrypted content
    to a new file with a timestamp in its name.
    Handles cases where the log file does not exist or decryption fails.
    """
    if not os.path.exists(ENCRYPTED_LOG_FILE):
        print(f"[INFO] Encrypted log file not found: {ENCRYPTED_LOG_FILE}")
        print("No logs to decrypt yet.")
        return

    # Generate a unique filename for the decrypted log
    timestamp_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    decrypted_output_filename = f"{DECRYPTED_LOG_FILE_PREFIX}{timestamp_str}.txt"

    print(f"[INFO] Attempting to decrypt logs from {ENCRYPTED_LOG_FILE} and save to {decrypted_output_filename}...")
    
    decrypted_lines = []
    errors_occurred = False

    try:
        with open(ENCRYPTED_LOG_FILE, "r") as f_encrypted:
            for line_num, line in enumerate(f_encrypted, 1):
                try:
                    # Strip newline characters and decode the encrypted line
                    decrypted_line = fernet_cipher.decrypt(line.strip().encode()).decode()
                    decrypted_lines.append(decrypted_line)
                except Exception as e:
                    print(f"[WARNING] Could not decrypt line {line_num} in {ENCRYPTED_LOG_FILE}: {e}")
                    print(f"[WARNING] Skipping malformed line: {line.strip()}")
                    errors_occurred = True
    except IOError as e:
        print(f"[ERROR] Could not read encrypted log file {ENCRYPTED_LOG_FILE}: {e}")
        return
    except Exception as e:
        print(f"[CRITICAL] An unexpected error occurred during reading encrypted log: {e}")
        return

    # Write decrypted content to the new file
    try:
        with open(decrypted_output_filename, "w") as f_decrypted:
            for d_line in decrypted_lines:
                f_decrypted.write(d_line + "\n")
        print(f"[INFO] Decrypted logs successfully saved to {decrypted_output_filename}")
        if errors_occurred:
            print("[WARNING] Some lines could not be decrypted. Check the console for warnings.")
    except IOError as e:
        print(f"[ERROR] Could not write decrypted log to {decrypted_output_filename}: {e}")
    except Exception as e:
        print(f"[CRITICAL] An unexpected error occurred during writing decrypted log: {e}")

# --- Main Execution --- #
if __name__ == "__main__":
    # Load the encryption key
    encryption_key = load_key()

    if encryption_key:
        # Initialize Fernet cipher with the loaded key
        fernet_cipher = Fernet(encryption_key)
        # Proceed with decryption and saving
        decrypt_and_save_log_file(fernet_cipher)
    else:
        print("[ERROR] Decryption cannot proceed without a valid encryption key.")


